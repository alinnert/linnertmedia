<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom"><title>Linnert Media</title><link href="https://linnertmedia.de"><link type="application/atom+xml" rel="self" href="https://linnertmedia.de/feed.xml"><updated>2018-06-05T16:41:23+00:00</updated><id>https://linnertmedia.de/feed.xml</id><author><name>Andreas Linnert</name><email>andreas@linnertmedia.de</email></author><entry><id>https://linnertmedia.de/blog/autohotkey-für-angenehmeres-arbeiten-mit-der-tastatur</id><link type="text/html" rel="alternate" href="https://linnertmedia.de/blog/autohotkey-für-angenehmeres-arbeiten-mit-der-tastatur"><title>AutoHotKey für angenehmeres Arbeiten mit der Tastatur</title><published>Sat Jun 10 2017 02:00:00 GMT+0200 (GMT+02:00)T00:00:00+00:00</published><author><name>Andreas Linnert</name><uri>https://linnertmedia.de</uri></author><content type="html"><![CDATA[&lt;p&gt;Viele Programmierer nutzen Vim als ihre primäre Entwicklungsumgebung unter anderem, weil so gut wie alle Befehle über das Buchstabenfeld der Tastatur erreichbar sind. Mit AutoHotkey lässt sich etwas Ähnliches bewerkstelligen und hat dabei meiner Meinung nach noch weitere Vorteile.&lt;/p&gt;
&lt;p&gt;Im konsolenbasierten Text-Editor Vim lässt sich der Textcursor über die Tasten &lt;code&gt;H&lt;/code&gt;/&lt;code&gt;J&lt;/code&gt;/&lt;code&gt;K&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt; steuern. Das ist ganz praktisch, da man beim Programmieren sehr oft zwischen dem Buchstabenfeld und den Pfeiltasten hin- und herwechseln muss. Wenn die Pfeiltasten über das Buchstabenfeld steuerbar sind, spart man sich jedoch die wiederholte Hin- und Herbewegung mit der Hand. Die Variante vom Vim-Editor hat meiner Meinung nach allerdings zwei Nachteile. Ich finde die Tastenbelegung nicht sehr intuitiv und sie funktioniert ausschließlich in Vim. Außerhalb muss man auf diese Komfortfunktion verzichten.&lt;/p&gt;
&lt;p&gt;Deswegen hab ich etwas nachgeforscht, ob man die Tastaturbelegung nicht generell anpassen kann. Und hierbei bin ich über &lt;a href=&quot;https://www.autohotkey.com/&quot;&gt;AutoHotkey&lt;/a&gt; gestolpert. Primär lässt sich dieses Programm nutzen, um verschiedene Vorgänge per Tastenkürzel zu automatisieren. Konkret lassen sich bspw. Tastenanschläge abfangen und in andere Tastatureingaben umwandeln, die anschließend weiter an das aktive Programm geschickt werden.&lt;/p&gt;
&lt;p&gt;Nachdem man AutoHotkey installiert hat, erstellt man Skripte in einer eigens dafür entwickelten Skriptsprache. Diese speichert man in Dateien mit der Endung &lt;code&gt;.ahk&lt;/code&gt;. Diese Dateien lassen sich anschließend ausführen und bleiben aktiv, bis man das Skript wieder manuell beendet. Solange die Skripte ausgeführt werden, können sie auf Tastatureingaben reagieren und unterschiedliche Aktionen ausführen.&lt;/p&gt;
&lt;p&gt;Daraufhin dachte ich mir folgendes: Die Capslock-Taste wird jetzt nicht so super-oft verwendet, also kann man diese doch in eine zusätzliche Modifier-Taste umfunktionieren. Ist diese gedrückt, möchte ich mit den Tasten &lt;code&gt;I&lt;/code&gt;/&lt;code&gt;J&lt;/code&gt;/&lt;code&gt;K&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt; die Pfeiltasten der Tastatur ansprechen können, &lt;code&gt;U&lt;/code&gt; und &lt;code&gt;O&lt;/code&gt; werden zu “Pos 1” und “Ende”, und &lt;code&gt;Z&lt;/code&gt; und &lt;code&gt;H&lt;/code&gt; werden zu “Bild auf/ab”. Wo wir schon dabei sind, können wir auch weitere Buchstaben dazu verwenden, die Lautstärke des PCs zu ändern, die Musiksteuerung anzusprechen und weitere Tasten anzusteuern, die sonst etwas schwerer erreichbar sind.&lt;/p&gt;
&lt;p&gt;Apropos schwer erreichbare Tasten: Bei der Programmierung brauche ich sehr häufig Zugriff auf die geschweiften Klammern. Diese sind mit &lt;code&gt;Alt Gr&lt;/code&gt; + &lt;code&gt;7&lt;/code&gt; bzw. &lt;code&gt;0&lt;/code&gt; alles andere als angenehm zu tippen. Wie wäre es also, hätte ich die &lt;code&gt;&amp;lt;&lt;/code&gt;-Taste als einen weiteren Modifier für Sonderzeichen und die geschweiften Klammern auf &lt;code&gt;J&lt;/code&gt; und &lt;code&gt;K&lt;/code&gt;? Das setzte sich mit der Zeit immer weiter fort, bis ein Großteil meiner Tastatur belegt war. Ich hab das so aufgesetzte System jetzt einige Zeit lang getestet und es quasi “ausreifen” lassen, bevor ich es jetzt öffentlich mit allen teile.&lt;/p&gt;
&lt;p&gt;Wie kann man diese umbelegten Tasten nun selbst ausprobieren? Das benötigt zwar ein paar Handgriffe, ist aber nicht allzu schwierig.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Zuerst muss &lt;a href=&quot;https://www.autohotkey.com/&quot;&gt;AutoHotkey&lt;/a&gt; von der offiziellen Webseite heruntergeladen und installiert werden.&lt;/li&gt;
&lt;li&gt;Dann erstellt man sich eine Datei mit der Endung &lt;code&gt;.ahk&lt;/code&gt;. Der Name und Ort ist egal. Ein Ordner, der mit einer Cloud synchronisiert wird (OneDrive, Dropbox etc.), ist allerdings empfehlenswert.&lt;/li&gt;
&lt;li&gt;Das Skript, das ich für diesen Zweck erstellt habe sowie eine Liste der wichtigsten Kürzel, findet ihr &lt;a href=&quot;https://gist.github.com/alinnert/a4f3868e10eafcfe6b4684dca3f79dfc&quot;&gt;hier auf Gist&lt;/a&gt;. Den Inhalt des Skripts einfach in die Datei kopieren und speichern.&lt;/li&gt;
&lt;li&gt;Durch einen Doppelklick auf diese Datei wird das Skript gestartet. Im Systray-Bereich erscheint ein neues Symbol, das anzeigt, dass ein Skript läuft. Über dieses kann ein Skript auch beendet oder neu geladen werden.&lt;/li&gt;
&lt;li&gt;Möchtet ihr dieses Skript bei jedem Systemstart sofort nutzen können, legt ihr eine Verknüpfung zu dieser &lt;code&gt;.ahk&lt;/code&gt;-Datei in folgenden Ordner (Windows 10): &lt;code&gt;%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Im oben verlinkten Skript kann man genauer nachlesen, welche Tastenkürzel definiert sind. Das Skript kann man bei Bedarf natürlich auch an seine eigenen Bedürfnisse anpassen. Ein weiterer angenehmer Nebeneffekt ist, dass die verschiedenen Tastaturlayouts bei Laptops nicht mehr so schwer ins Gewicht fallen. Pfeiltasten und weitere Tasten wie “Bild auf/ab”, “Pos 1” und “Ende” sind auch dort immer an der gewohnten Stelle.&lt;/p&gt;
&lt;p&gt;Nichtsdestotrotz gibt jedoch ein paar Dinge, die man sich im Hinterkopf behalten sollte:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Das Skript funktioniert nicht, wenn eine Anwendung mit Admin-Berechtigung den Fokus hat. Ich tippe auf einen Schutzmechanismus von Windows.&lt;/li&gt;
&lt;li&gt;Dadurch, dass die &lt;code&gt;&amp;lt;&lt;/code&gt;-Taste zum Modifier umfunktioniert wurde, reagiert diese erst, wenn man diese wieder loslässt.&lt;/li&gt;
&lt;li&gt;Es dauert natürlich, bis man sich an eine neu belegte Tastatur gewöhnt hat. Bei mir dauerte es zwischen einer und zwei Wochen. Allerdings habe ich die Belegung der Tasten auch Schritt für Schritt aufgebaut.&lt;/li&gt;
&lt;li&gt;AutoHotkey ist aktuell nur für Windows verfügbar. Ich bin mir nicht sicher, ob es eine ähnliche Lösung für macOS gibt. Für Linux hab ich keine gefunden ‒ außer eigene Tastaturmappings zu erstellen.&lt;/li&gt;
&lt;li&gt;Wenn man an einem anderen PC sitzt, der das Skript nicht nutzt, kann es vorkommen, dass man aus Gewohnheit eine der neuen Tastenkürzel verwendet und sich wundert, dass der PC nicht wie gewohnt reagiert.&lt;/li&gt;
&lt;/ol&gt;
]]></content></entry><entry><id>https://linnertmedia.de/blog/variablen-undefined-und-simple-datentypen</id><link type="text/html" rel="alternate" href="https://linnertmedia.de/blog/variablen-undefined-und-simple-datentypen"><title>Variablen, undefined und simple Datentypen in JavaScript</title><published>Mon Jun 29 2015 02:00:00 GMT+0200 (GMT+02:00)T00:00:00+00:00</published><author><name>Andreas Linnert</name><uri>https://linnertmedia.de</uri></author><content type="html"><![CDATA[&lt;p&gt;Leute, die von anderen objektorientierten Programmiersprachen wie Java oder C# nach JavaScript wandern, fühlen sich unter Umständen irritiert. JavaScript ist einfach anders, bietet aber eine vertraute C-ähnliche Syntax. In der Tat hab ich bereits gelesen, dass JavaScript als &amp;quot;unlernbare Sprache&amp;quot; betitelt wurde. Diese Blog-Serie erklärt die Grundlagen und Funktionsweise von JavaScript, um ihr diesen schlechten Ruf wieder abzunehmen.&lt;/p&gt;
&lt;div class=&quot;info-box&quot;&gt;&lt;div class=&quot;info-box__title&quot;&gt;Info: Strict Mode&lt;/div&gt;&lt;p&gt;Bevor wir wirklich beginnen, ein kleiner Hinweis: Es wird generell empfohlen, den strict mode von JavaScript zu aktivieren. Dazu am Anfang einer &lt;code&gt;.js&lt;/code&gt;-Datei oder eines JavaScript-Blocks im HTML einfach &lt;code&gt;&#39;use strict&#39;;&lt;/code&gt; schreiben. Im strict mode werden mehr Fehler geworfen, um unerwartetes Verhalten zu vermeiden. Eine genaue Beschreibung ist hier zu lesen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mediaevent.de/javascript/strict-mode.html&quot;&gt;http://www.mediaevent.de/javascript/strict-mode.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eventuell folgt später auch eine Zusammenfassung der Auswirkungen von meiner Seite in diesem Blog. Meine Artikel zum Thema JavaScript gehen jedenfalls von &lt;strong&gt;aktiviertem strict mode&lt;/strong&gt; aus.&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Eventuell folgt später auch eine Zusammenfassung der Auswirkungen von meiner Seite in diesem Blog. Meine Artikel zum Thema JavaScript gehen jedenfalls von aktiviertem strict mode aus.&lt;/p&gt;
&lt;h2&gt;Variablen&lt;/h2&gt;
&lt;p&gt;Variablen werden mit dem keyword &lt;code&gt;var&lt;/code&gt; deklariert. Wann und wo man Variablen deklariert, ist egal. Es muss also nicht zu Beginn einer Funktion sein. Die Variable ist ab dem deklarierten Zeitpunkt für den gesamten restlichen Verlauf der aktuellen Funktion sichtbar.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    theAnswer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    darling &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; kitten &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Minka&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Aktuell ignoriere ich hier die beiden neuen keywords &lt;code&gt;let&lt;/code&gt; und &lt;code&gt;const&lt;/code&gt;, die mit ECMAScript 6 eingeführt werden, da sie im Normalfall noch nicht verwendet werden können.)&lt;/p&gt;
&lt;p&gt;Gültige Variablennamen können Buchstaben (case sensitive), Zahlen und die beiden Zeichen &lt;code&gt;_&lt;/code&gt; und &lt;code&gt;$&lt;/code&gt; beinhalten. Zahlen dürfen jedoch nicht am Anfang des Namens stehen.&lt;/p&gt;
&lt;p&gt;Datentypen kann man in zwei Kategorien unterteilen: simple und komplexe Datentypen. Zusätzlich gibt es noch den Typen &lt;code&gt;undefined&lt;/code&gt;, der eine besondere Rolle spielt. Simple Datentypen sind: &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; und der ab ECMAScript 6 neue Typ &lt;code&gt;symbol&lt;/code&gt;. Komplexe Typen sind: &lt;code&gt;object&lt;/code&gt; und &lt;code&gt;function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Von welchem Datentyp eine Variable ist, findet man mit dem Schlüsselwort &lt;code&gt;typeof&lt;/code&gt; heraus. Man kann &lt;code&gt;typeof&lt;/code&gt; verwenden wie eine Funktion, muss man aber nicht. Siehe dazu folgende Beispiele:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;object&quot;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;object&quot;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;string&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da das Ergebnis von &lt;code&gt;typeof&lt;/code&gt; selbst immer ein String ist, kann man rein theoretisch den Typ davon ebenfalls mit &lt;code&gt;typeof&lt;/code&gt; abfragen. (Siehe dritte Zeile oben) Die Sinnigkeit ist zwar ohne Frage anzweifelbar, allerdings verdeutlicht dieses Beispiel, was ich anfangs mit den Bausteinen aufzeigen wollte.&lt;/p&gt;
&lt;p&gt;Sicher fragen sich jetzt einige, was denn mit Arrays ist. Die Antwort zu Arrays beantworte ich allerdings später, wenn ich den Datentyp &lt;code&gt;object&lt;/code&gt; genauer behandle.&lt;/p&gt;
&lt;h2&gt;Der Datentyp &lt;code&gt;undefined&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Bei &lt;code&gt;undefined&lt;/code&gt; muss man unterscheiden, ob eine Variable oder nur deren Wert nicht definiert ist. Hierzu folgendes Beispiel:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tree&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Baum&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;kein Baum&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;kein Baum&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flower&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Blume&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;keine Blume&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; Uncaught ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;info-box&quot;&gt;&lt;div class=&quot;info-box__title&quot;&gt;Info: Truthy/Falsy Value&lt;/div&gt;&lt;p&gt;Wird an einer Stelle ein boolescher Wert erwartet, aber keiner geliefert, wandelt JavaScript den vorhandenen Wert automatisch um. Das Ergebnis entspricht in aller Regel dem, was man normalerweise erwartet. Man spricht hier von “Truthy Value” bzw. “Falsy Value”.&lt;/p&gt;
&lt;p&gt;Falsy Values sind: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; und &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Da &lt;code&gt;0&lt;/code&gt; ein Falsy Value ist, lässt sich mit &lt;code&gt;if (allFlowers.length)&lt;/code&gt; einfach abfragen, ob ein Array Elemente beinhaltet. Natürlich spricht nichts dagegen, wenn man Bedingungen spezifischer angeben möchte: &lt;code&gt;if (allFlowers.length &amp;gt; 0)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Beim ersten &lt;code&gt;if&lt;/code&gt;-Statement (&lt;code&gt;if (tree)&lt;/code&gt;) wird “kein Baum” in der JavaScript-Konsole ausgegeben, da eine nicht initialisierte Variable den Wert &lt;code&gt;undefined&lt;/code&gt; hat, welcher schließlich als &lt;code&gt;false&lt;/code&gt; interpretiert wird (“falsy value”). Dies kann man sich z. B. auch bei Funktionsparametern zunutze machen. Möchte man prüfen, ob ein Wert für einen bestimmten Parameter übergeben wurde, lässt sich das folgendermaßen bewerkstelligen:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;logSomeText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;kein Text eingegeben&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Ein paar ergänzende Beispiele:&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; tree&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; undefined&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;undefined&quot;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;boolean&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beim zweiten &lt;code&gt;if&lt;/code&gt;-Statement (&lt;code&gt;if (flower)&lt;/code&gt;) dagegen wird ein &lt;code&gt;ReferenceError&lt;/code&gt; geworfen. (Ein &lt;code&gt;Error&lt;/code&gt; entspricht einer &lt;code&gt;Exception&lt;/code&gt; in anderen Sprachen.) Prinzipiell vermeidet man diesen Fehler, indem man keine Variablen verwendet, bevor man sie mit &lt;code&gt;var&lt;/code&gt; oder als Funktionsparameter deklariert.&lt;/p&gt;
&lt;h2&gt;Simple Datentypen&lt;/h2&gt;
&lt;p&gt;Bei den simplen Datentypen gibt es kaum Überraschungen. Wichtig zu wissen ist allerdings, dass alle simplen Typen als Wert gespeichert werden. Die Wertübergabe erfolgt also “by value”.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myNumber&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; myString&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; myBool&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

myNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
myNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13.37&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
myString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hallo Welt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
myBool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; myNumber&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; myString&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; myBool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;number string boolean&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript wechselt zwischen Ganz- und Kommazahlen automatisch, sofern notwendig. Beides wird einfach im Typ &lt;code&gt;number&lt;/code&gt; zusammengefasst.&lt;/p&gt;
&lt;p&gt;Strings können in doppelte sowie einfache Anführungszeichen geschrieben werden. Im Gegensatz zu PHP gibt es technisch keinen Unterschied. Ich persönlich bevorzuge die Schreibweise mit den einfachen Anführungszeichen, da in Strings gerne mal HTML auftauchen kann und so Attribute wie gewohnt mit doppelten Anführungszeichen geschrieben werden können, ohne diese (mit dem Backslash &lt;code&gt;\&lt;/code&gt;) entwerten zu müssen. Bei Texten, in denen viele Apostrophe vorkommen, bietet sich die Verwendung von doppelten Anführungszeichen an. Mehrere Strings werden wie aus vielen anderen Sprachen bekannt mit dem Plus-Zeichen aneinandergehängt.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; greeting &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hallo &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Welt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Der simple Typ &lt;code&gt;symbol&lt;/code&gt; sowie die komplexen Typen &lt;code&gt;object&lt;/code&gt; und &lt;code&gt;function&lt;/code&gt; sprengen allerdings den Rahmen dieses Artikels und werden später gesondert behandelt. Der nächste Artikel wird direkt die beiden komplexen Datentypen behandeln, da sie prinzipiell den Kern von JavaScript darstellen.&lt;/p&gt;
]]></content></entry><entry><id>https://linnertmedia.de/blog/willkommen-auf-dem-neuen-blog</id><link type="text/html" rel="alternate" href="https://linnertmedia.de/blog/willkommen-auf-dem-neuen-blog"><title>Willkommen auf dem neuen Linnert Media-Blog</title><published>Sun Jun 17 2018 02:00:00 GMT+0200 (GMT+02:00)T00:00:00+00:00</published><author><name>Andreas Linnert</name><uri>https://linnertmedia.de</uri></author><content type="html"><![CDATA[&lt;p&gt;Hola zusammen und willkommen beim neuen Linnert Media &lt;em&gt;Open Source-Blog&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Wie ihr seht, wurde mein Blog grundlegend überarbeitet. Das hat mehrere Gründe:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ich verliere mit der Zeit immer mehr das Interesse an PHP und allen zusammenhängenden Technologien und Produkten. Ich bin gerade dabei eine kleine Anwendung in PHP zu entwickeln und stoße dabei immer wieder auf Probleme und Unschönheiten, die ich so von anderen Sprachen nicht kenne. Es existieren Einschränkungen, die das Arbeiten mit Web-Frameworks unnötig unschön machen. Außerdem lässt sich PHP-Code nur dank Drittsoftware debuggen (XDebug), was auch entweder zu Problemen führt (das Craft CMS-Backend in Zusammenhang mit einem bestimmten Plugin zerschießt) oder gar nicht erst funktioniert (Slim Framework). Fehler in Server-Code ohne Debugger zu finden ist... äußerst uncool.&lt;br&gt;
Wenn ich es außerdem schaffe, bei meinen Webseiten gänzlich auf PHP zu verzichten, kann ich mir einen PHP-Hosting-Plan und damit Geld sparen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Der Workflow, eine Webseite zu aktualisieren und dabei aufzupassen, dass Datenbankstrukturen nicht zu Bruch gehen oder ähnliche Späße, fühlt sich für mich einfach falsch an. Vor allem bei einem Blog. Ich bin schon länger am Überlegen, ob dieser Workflow wirklich der Richtige ist. Aber da sich der Datenbestand bei manchen Webseiten im Live-Betrieb ändern kann, ist eine dateibasierte Umsetzung (a la SQLite) auch nicht so einfach möglich.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ich verfasse meine Blog-Posts gerne als Markdown-Datei. Diese in einem CMS zu pflegen ist auch nicht das Gelbe vom Ei. Ich bin dort nicht in der Lage, die Markdown-Syntax für Bilder zu verwenden, um selbige auch auf der Webseite auszugeben. Das heißt, ich musste meinen Quellcode bei allen Bildern aufsplitten und die Bilder manuell über das CMS einpflegen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Das neue Blog&lt;/h2&gt;
&lt;p&gt;Deswegen gehe ich mit diesem Blog einen völlig anderen Weg: Ich hab mit Node.js einen eigenen kleinen Static Site Generator aufgezogen, der aus Markdown-Dateien die fertigen HTML-Dateien erstellt. Ich hab lange andere Generatoren ausprobiert, aber viele haben das Problem, dass dynamische Seiten nicht oder nur schwer erstellbar sind. Also zum Beispiel Seiten, die alle Beiträge zu einem bestimmten Tag auflisten.&lt;/p&gt;
&lt;p&gt;Diese Arbeitsweise erlaubt es mir, die Seite vollständig über Git zu verwalten und außerdem als statische Seite auf &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; zu hosten, was (abgesehen von der Domain) komplett kostenlos ist.&lt;/p&gt;
&lt;p&gt;Auch habe ich die Gelegenheit genutzt, um alte Posts auszumisten. Darunter die zum Thema &lt;em&gt;Craft CMS&lt;/em&gt;, da sich mit Version 3 jetzt einiges geändert hat und auch wegen den oben genannten Gründen. Die Beiträge zum Thema JavaScript werde ich aber vorerst hierlassen, auch wenn diese auch eine Überarbeitung nötig hätten. Der Eintrag zum Thema Node.js wurde bereits komplett neu überarbeitet.&lt;/p&gt;
&lt;h2&gt;Was ist ein Open Source-Blog?&lt;/h2&gt;
&lt;p&gt;Der komplette Quellcode dieser Webseite liegt auf &lt;a href=&quot;https://github.com/alinnert/linnertmedia&quot;&gt;GitHub&lt;/a&gt;. Darüber kann ab jetzt auch vollständig die Kommunikation ablaufen, wenn es um Fragen zu einem Beitrag geht oder auch bei Ideen zu weiteren Themen, über die ich einen Beitrag verfassen kann.&lt;/p&gt;
&lt;p&gt;Egal, um was es geht: Erstellt einfach ein &lt;a href=&quot;https://github.com/alinnert/linnertmedia/issues&quot;&gt;Issue auf GitHub&lt;/a&gt; und ich werde es so bald wie möglich bearbeiten.&lt;/p&gt;
&lt;p&gt;Aber nun viel Spaß beim Lesen!&lt;/p&gt;
]]></content></entry><entry><id>https://linnertmedia.de/blog/javascript-objekte</id><link type="text/html" rel="alternate" href="https://linnertmedia.de/blog/javascript-objekte"><title>Objekte in JavaScript</title><published>Sun Sep 13 2015 02:00:00 GMT+0200 (GMT+02:00)T00:00:00+00:00</published><author><name>Andreas Linnert</name><uri>https://linnertmedia.de</uri></author><content type="html"><![CDATA[&lt;p&gt;Objekte sind ein Hauptbestandteil von JavaScript. Diese erlauben es, Strukturen aufzubauen oder Daten und Funktionalitäten zusammenzufassen. Dieser Artikel erklärt, wie sie funktionieren und wie man mit ihnen umgeht.&lt;/p&gt;
&lt;div class=&quot;info-box&quot;&gt;&lt;div class=&quot;info-box__title&quot;&gt;Info: Vorwort&lt;/div&gt;&lt;p&gt;Sehr bald nachdem ich den letzten Artikel veröffentlicht hatte, hat sich mein Bild über Objekte etwas verändert. Ich hab Artikel über JavaScript-Objekte und -Klassen gelesen, begonnen das Buch &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000262&quot;&gt;Programming JavaScript Applications&lt;/a&gt; (von Eric Elliot) zu lesen und Aufzeichnungen von Vorträgen zu diesem Thema anzusehen. Dadurch bin ich jetzt in der Lage, einen tieferen Blick in Objekte zu gewähren als noch vor ein paar Wochen.&lt;/p&gt;
&lt;/div&gt;&lt;h2&gt;Objekte erstellen&lt;/h2&gt;
&lt;p&gt;Objekte kann man sich als Gruppierung mehrerer Variablen vorstellen. Gehen wir von folgendem Beispiel aus.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Andreas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;andreas@linnertmedia.de&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; admin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mail&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; admin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; Andreas andreas@linnertmedia.de true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All diese Daten gehören zu einem Benutzer. Diesen Benutzer möchten wir auch gerne als solchen Behandeln und nicht einzeln von seinen ganzen Eigenschaften sprechen. Hier kommen Objekte ins Spiel.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Andreas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;andreas@linnertmedia.de&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;admin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; Object {name: &quot;Andreas&quot;, mail: &quot;andreas@linnertmedia.de&quot;, admin: true}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Somit kann man alle Daten des Nutzers über das Objekt &lt;code&gt;user&lt;/code&gt; ansprechen. Man nennt die Werte ab hier allerdings nicht mehr Variablen sondern Eigenschaften oder Properties. Üblicher und kürzer ist allerdings folgende Schreibweise.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Andreas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    mail&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;andreas@linnertmedia.de&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    admin&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es gibt hier einige wichtige Punkte, die man sich im Hinterkopf behalten sollte. Durch die Klammerschreibweise wird ein neues Objekt erstellt. Weist man dieses Objekt einer Variable (oder auch einer Objekteigenschaft) zu, geht der vorherige Wert verloren. Näheres hierzu erläutere ich in einem eigenen Artikel.&lt;/p&gt;
&lt;h2&gt;Die Namen der Eigenschaften&lt;/h2&gt;
&lt;p&gt;Die Namen der Eigenschaften selbst — in unserem Beispiel &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;mail&lt;/code&gt; und &lt;code&gt;admin&lt;/code&gt; — können jeden simplen Datentyp annehmen (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; und &lt;code&gt;symbol&lt;/code&gt;). Um das zu demonstrieren, muss eine weitere Möglichkeit verwendet werden, um auf Eigenschaften zuzugreifen.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; thing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hallo welt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hallo JavaScript!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hallo welt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;Hallo JavaScript!&quot;&lt;/span&gt;

thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;The Answer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Andreas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; 123&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Blume&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tulpe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Blume&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;Tulpe&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Schreibweise mit eckigen Klammern erlaubt mehr Flexibilität bei der Benennung von Eigenschaften. So kann man beispielsweise auch Leerzeichen oder sogar Zeilenumbrüche verwenden. Ein Nebeneffekt bei der Verwendung von &lt;code&gt;boolean&lt;/code&gt; und &lt;code&gt;number&lt;/code&gt; ist, dass deren Werte automatisch auch in String-Form verwendbar sind. Es verhält sich in etwa so, als würde automatisch die &lt;code&gt;toString&lt;/code&gt;-Methode aufgerufen werden, wenn man einen Boolean- oder Zahlenwert als Propertynamen verwendet. Für Symbole gilt dies allerdings nicht. Da sich Symbole hier sowieso etwas eigen verhalten und die Unterstützung noch nicht so verbreitet ist, gehe ich an dieser Stelle nicht weiter darauf ein.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;The Answer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;42&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;The Answer&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ein Einsatzzweck für diese Art der Flexibilität lässt sich sicher schwer finden, jedoch demonstriert dies, was in JavaScript möglich wäre und dass JavaScript-Objekte im Grunde nichts mit Java-Objekten zu tun haben. Unter diesem Gesichtspunkt halte ich den Satz “Alles in JavaScript ist ein Objekt” für Umsteiger äußerst irreführend. Denn er erklärt nicht, wie der Begriff “Objekt” zu verstehen ist.&lt;/p&gt;
&lt;p&gt;Natürlich gilt außerdem weiterhin:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;object&quot;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;string&quot;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;string&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Prototypen&lt;/h2&gt;
&lt;p&gt;Durch ECMAScript 2015 werden Klassen in JavaScript eingeführt. Es gibt Leute, welche der Meinung sind, Klassen sind eines der schlechtesten Features, die auf JavaScript zukommen werden. Ein Grund ist, dass es keine echten Klassen sind und sich die Funktionsweise leicht von wirklich klassenbasierten Sprachen unterscheiden. Der größte Grund ist allerdings, dass JavaScript bereits eine Mechanik bietet, die flexibler ist als Klassen: Prototypen.&lt;/p&gt;
&lt;div class=&quot;info-box&quot;&gt;&lt;div class=&quot;info-box__title&quot;&gt;Info: Am Rande&lt;/div&gt;&lt;p&gt;Ich hab selbst etwas Zeit gebraucht, die Argumente dieser Leute zu verstehen. Der Grund liegt in der leider etwas flachen Argumentation und den fehlenden Beispielen. Nachdem ich mich auf Prototypen eingelassen hatte, wurde mir jedoch vieles klar. Ich möchte an dieser Stelle jedoch nur auf die Funktionsweise der Prototypen eingehen. Für die Vorteile von Prototypen gegenüber Klassen empfehle ich andere Quellen. Videos, Vorträge, Bücher…&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Besitzt ein Objekt einen Prototypen, hat man Zugriff auf alle Eigenschaften des Prototyps, ohne Gefahr zu laufen, diese versehentlich zu manipulieren. Da dieser Prototyp ebenfalls ein Objekt ist, kann dieser wiederum einen Prototypen besitzen. Man spricht hier von der Prototypenkette. Greift man auf eine Eigenschaft eines Objekts zu, wird bei diesem Objekt geprüft, ob es eine Eigenschaft mit diesem Namen besitzt. Ist das nicht der Fall, wird dessen Prototyp überprüft usw. Wird eine Eigenschaft in keinem Objekt der Prototypenkette gefunden, ist der Wert &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ich stelle mir Objekte im Zusammenhang mit Prototypen wie einen Stapel Blätter vor. Von oben betrachtet sitzt jede Eigenschaft am gleichen Platz auf dem Papier. Fehlt eine Eigenschaft in einem Objekt, befindet sich an der entsprechenden Stelle ein Loch, durch das man das darunterliegende Papier und dessen Wert für diese Eigenschaft sieht, sofern dort ein Wert festgelegt ist.&lt;/p&gt;
&lt;div class=&quot;info-box&quot;&gt;&lt;div class=&quot;info-box__title&quot;&gt;Info: ECMAScript 5 und der Internet Explorer&lt;/div&gt;&lt;p&gt;Einige der hier verwendeten Methoden sind Teil von &lt;em&gt;ECMAScript 5&lt;/em&gt;. Diese erfordern &lt;em&gt;Internet Explorer 9&lt;/em&gt; oder höher. Für ältere Internet Explorer-Versionen gibt es andere Möglichkeiten, mit Prototypen zu arbeiten.&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Man kann Prototypen folgendermaßen definieren. Ich werde hierzu bereits Funktionen in den Beispielen verwenden. Hierzu folgt aber noch ein separater Artikel.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; andreas&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; minka&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sayYourName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;My name is &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

andreas &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
andreas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Andy&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

minka &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Minka&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    sayYourName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; Miau!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minka&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

andreas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayYourName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;My name is Andy&quot;&lt;/span&gt;
minka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayYourName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; &quot;Minka Miau!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bei der Erstellung von Objekten trenne ich sehr gerne die Deklaration und Initialisierung der Variablen, da das sonst sehr schnell unübersichtlich wird, und die Kommata am Ende von Objekten auf mich etwas seltsam wirken.&lt;/p&gt;
&lt;p&gt;Wir erstellen ein Objekt &lt;code&gt;user&lt;/code&gt;, das die Basis von Nutzerobjekten sein wird. Mit &lt;code&gt;Object.create(prototype)&lt;/code&gt; erstellen wir ein neues Objekt, legen aber gleichzeitig auch dessen Prototyp fest. Da das Objekt &lt;code&gt;andreas&lt;/code&gt; nun &lt;code&gt;user&lt;/code&gt; als Prototypen besitzt, erbt es auch dessen Funktion &lt;code&gt;sayYourName&lt;/code&gt;. &lt;code&gt;andreas.sayYourName&lt;/code&gt; zeigt somit auf die Funktion, die in &lt;code&gt;user&lt;/code&gt; definiert wurde. Es handelt sich auch exakt um diese Funktion. Es wurde keine Kopie erstellt.&lt;/p&gt;
&lt;p&gt;Das Schlüsselwort &lt;code&gt;this&lt;/code&gt; zeigt dabei immer auf das Objekt, in dessen Kontext die Funktion aufgerufen wurde. Da wir nicht &lt;code&gt;user.sayYourName()&lt;/code&gt; aufgerufen haben, sondern &lt;code&gt;andreas.sayYourName()&lt;/code&gt;, sucht &lt;code&gt;this&lt;/code&gt; innerhalb von &lt;code&gt;andreas&lt;/code&gt; nach einer Eigenschaft mit dem Namen &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.setPrototypeOf(object, prototype)&lt;/code&gt; erlaubt das nachträgliche Setzen oder Ändern des Prototyps eines Objekts.&lt;/p&gt;
&lt;p&gt;Mit der Methode &lt;code&gt;hasOwnProperty&lt;/code&gt; lässt sich prüfen, ob ein Objekt selbst eine bestimmte Eigenschaft besitzt, oder ob es sie nur durch Vererbung hat.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;andreas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;andreas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sayYourName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woher kommt die Funktion &lt;code&gt;hasOwnProperty&lt;/code&gt;? Jedes neu erstellte Objekt hat automatisch einen Prototypen, nämlich &lt;code&gt;Object.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; true&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hasOwnProperty &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hasOwnProperty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da der Artikel bereits sehr lang und vollgestopft mit Informationen ist, mache ich an dieser Stelle einen Schnitt.&lt;/p&gt;
]]></content></entry><entry><id>https://linnertmedia.de/blog/die-grundlagen-zu-nodejs</id><link type="text/html" rel="alternate" href="https://linnertmedia.de/blog/die-grundlagen-zu-nodejs"><title>Die Grundlagen zu Node.js</title><published>Sat Jun 16 2018 02:00:00 GMT+0200 (GMT+02:00)T00:00:00+00:00</published><author><name>Andreas Linnert</name><uri>https://linnertmedia.de</uri></author><content type="html"><![CDATA[&lt;p&gt;Node.js ist inzwischen allgegenwärtig in der Welt der Web-Entwicklung. Einige kennen es aber vielleicht nur im Kontext von JavaScript-Server-Anwendungen. Dieser Artikel soll einen groben Überblick über alle Facetten von Node.js geben.&lt;/p&gt;
&lt;h2&gt;Allgemeine Informationen&lt;/h2&gt;
&lt;p&gt;Node.js ist eine Plattform, die es erlaubt, JavaScript-Code außerhalb eines Web-Browsers auszuführen. Die aktuellen Versionen verwenden &lt;em&gt;V8&lt;/em&gt; (Die JavaScript-Engine von Googles Browser &lt;em&gt;Chrome&lt;/em&gt;) zum Ausführen von JavaScript-Code. Da V8 nur relativ begrenzte Möglichkeiten bietet, stehen einem des Weiteren noch native APIs zur Verfügung, um beispielsweise auf das lokale Dateisystem oder den Netzwerkverkehr zugreifen zu können.&lt;/p&gt;
&lt;p&gt;Dadurch eröffnen sich nun einige Möglichkeiten und Einsatzgebiete. Der Bekannteste darunter ist die Entwicklung von Web-Anwendungs-Servern. Sei es zur Erstellung von HTML-Seiten oder zur Bereitstellung einer REST- oder GraphQL-API. Ein wichtiger Unterschied zu PHP ist hier allerdings, dass kein zusätzlicher Webserver wie Apache notwendig ist, denn Node.js selbst ist bereits der Server. Da man somit quasi seinen eigenen Server baut, hat man auch etwas mehr Freiheiten als mit Fertigpaketen wie Apache.&lt;/p&gt;
&lt;p&gt;Weitere Einsatzzwecke sind das Erstellen von Kommandozeilen-Skripten und die Verwendung als Build-Tool für eigene Projekte. Nach der Installation auf einem Rechner stehen drei neue Befehle in der Kommandozeile zur Verfügung: &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt; und &lt;code&gt;npx&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Der &lt;code&gt;node&lt;/code&gt;-Befehl&lt;/h2&gt;
&lt;p&gt;Mit dem Befehl &lt;code&gt;node&lt;/code&gt; lassen sich &lt;code&gt;.js&lt;/code&gt;-Dateien ausführen, aber auch eine interaktive JavaScript-Konsole starten. Letztere startet man einfach durch ausführen von &lt;code&gt;node&lt;/code&gt; in der Kommandozeile. Gibt man als Parameter allerdings eine JavaScript-Datei an, so wird der Code in dieser Datei ausgeführt. Führt man also den Befehl &lt;code&gt;node my-script.js&lt;/code&gt; aus — und geht davon aus, dass diese Datei existiert und den Code &lt;code&gt;console.log(&#39;Hallo Welt&#39;)&lt;/code&gt; enthält — dann wird &amp;quot;Hallo Welt&amp;quot; in der Kommandozeile ausgegeben.&lt;/p&gt;
&lt;p&gt;Unter Linux und Unix kann man sogar einen Schritt weitergehen und Skripte erstellen, die sich wie übliche Bash-Skripte starten lassen (&lt;code&gt;./my-script.js&lt;/code&gt;). Dazu muss die JavaScript-Datei in der ersten Zeile folgendes beinhalten: &lt;code&gt;#!/usr/bin/env node&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dadurch lassen sich einerseits Skripte erstellen, die einen endlichen Job erledigen und irgendwann fertig sind — z. B. Dateien kopieren. Oder aber es wird ein Dienst gestartet, der permanent im Hintergrund läuft und auf Verbindungen oder Anfragen wartet.&lt;/p&gt;
&lt;h2&gt;Neue Projekte anlegen mit &lt;code&gt;npm init&lt;/code&gt; und &lt;code&gt;package.json&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Npm ist die in Node.js integrierte Paketverwaltung. Damit lassen sich Projekte erstellen und dessen Abhängigkeiten verwalten. In der Regel beginnt man damit, dass man in einem Ordner ein Npm-Projekt initialisiert. Das geschieht in der Regel im Hauptverzeichnis des Projekts, an dem man arbeitet, mit folgendem Befehl: &lt;code&gt;npm init&lt;/code&gt;. Danach werden einem einige Fragen zum Projekt gestellt: Name, Version, Autor, Lizenz etc. Die muss man nicht sofort und absolut gewissenhaft beantworten, denn ein späteres Ändern der Daten ist sehr einfach möglich.&lt;/p&gt;
&lt;p&gt;Nachdem das Projekt initialisiert wurde, findet man im Projektverzeichnis eine neue Datei: &lt;code&gt;package.json&lt;/code&gt;. Diese beinhaltet alle vorhin eingegebenen Daten. Mehr ist dabei auch nicht passiert. Man kann diese Datei alternativ also auch per Hand erstellen. Diese Datei umfasst alle Informationen zum aktuellen Projekt und lässt sich als Dreh- und Angelpunkt dessen sehen. Ein händisches Editieren der Datei ist problemlos möglich und stellenweise sogar erforderlich.&lt;/p&gt;
&lt;h2&gt;Pakete installieren mit &lt;code&gt;npm install&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In der &lt;code&gt;package.json&lt;/code&gt; befinden sich u. a. die Felder &lt;code&gt;dependencies&lt;/code&gt; und &lt;code&gt;devDependencies&lt;/code&gt;. Diese listen die Pakete auf, die vom aktuellen Projekt benötigt werden, damit das Projekt lauffähig ist. Unter &lt;a href=&quot;https://npmjs.org&quot;&gt;npmjs.org&lt;/a&gt; kann man sich einen Überblick über alle verfügbaren Pakete verschaffen.&lt;/p&gt;
&lt;p&gt;Die beiden Felder unterscheiden sich dabei nur darin, dass &lt;code&gt;devDependencies&lt;/code&gt; alle Pakete beinhaltet, die zur Entwicklung am Projekt notwendig sind. &lt;code&gt;dependencies&lt;/code&gt; listet alle Pakete auf, die zur generellen Funktionalität des Projekts notwendig sind. &lt;code&gt;devDependencies&lt;/code&gt; beinhaltet also je nach Art des Projekts beispielsweise Entwicklerwerkzeuge wie Linter, Test-Tools, TypeScript-Definitionen und ähnliches.&lt;/p&gt;
&lt;p&gt;Möchten wir jetzt ein neues Paket installieren, bewegen wir uns in der Kommandozeile erst einmal in das Verzeichnis, das die &lt;code&gt;package.json&lt;/code&gt; beinhaltet. Dann führen wir den Befehl &lt;code&gt;npm install &amp;lt;name-of-package&amp;gt;&lt;/code&gt; aus, wobei &lt;code&gt;&amp;lt;name-of-package&amp;gt;&lt;/code&gt; der Name des Pakets ist, das wir installieren möchten. Installieren wir beispielsweise das Framework &lt;em&gt;Vue&lt;/em&gt; würde das so aussehen: &lt;code&gt;npm install vue&lt;/code&gt;. Der exakte Name des Paketes ist in der Regel in der Dokumentation der Bibliothek zu finden, oder direkt unter &lt;a href=&quot;https://npmjs.org&quot;&gt;npmjs.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Was passiert nun bei der Installation? Alle installierten Pakete landen im Ordner &lt;code&gt;node_modules&lt;/code&gt;, der neben unserer &lt;code&gt;package.json&lt;/code&gt; angelegt wird, sollte er noch nicht existieren. Außerdem wird dieses Paket in der &lt;code&gt;package.json&lt;/code&gt; im Feld &lt;code&gt;dependencies&lt;/code&gt; automatisch hinterlegt. Das hat folgenden Vorteil: Bei der Verwendung einer Versionskontrolle wie Git brauchen wir den Inhalt von &lt;code&gt;node_modules&lt;/code&gt; nicht mit unter Versionierung stellen. Checkt man das Projekt frisch aus und hat lediglich die &lt;code&gt;package.json&lt;/code&gt;, reicht ein einfaches &lt;code&gt;npm install&lt;/code&gt; und es werden automatisch alle Pakete erneut installiert, die in der &lt;code&gt;package.json&lt;/code&gt; unter &lt;code&gt;dependencies&lt;/code&gt; (und &lt;code&gt;devDependencies&lt;/code&gt;) aufgelistet sind.&lt;/p&gt;
&lt;h2&gt;Skripte ausführen mit &lt;code&gt;npm run&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In der &lt;code&gt;package.json&lt;/code&gt; befindet sich auch ein Feld &lt;code&gt;scripts&lt;/code&gt;. Dies beinhaltet eine Liste selbstdefinierter Skripte, die man immer wieder braucht. Npm hilft einem auch dabei, häufig benötigte Skripte schneller und einfacher ausführen zu können. Ein Skript definiert man, indem man dem &lt;code&gt;scripts&lt;/code&gt;-Objekt ein Key-Value-Paar hinzufügt. Der „key“ ist dabei der Name des Skripts, der „value“ das Skript, das dann letzten Endes ausgeführt wird.&lt;/p&gt;
&lt;div class=&quot;filename&quot;&gt;Datei: package.json (Beispiel)&lt;/div&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	...
	&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack -p&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Im Grunde können die Skripte alles enthalten, was man auch in der Kommandozeile schreiben kann. Zusätzlich jedoch können ohne Umwege Skripte aufgerufen werden, die über Npm installiert wurden. Stellt ein &lt;strong&gt;lokal und nicht global&lt;/strong&gt; installiertes Paket einen Kommandozeilenbefehl zur Verfügung (wie es zum Beispiel bei &lt;code&gt;webpack&lt;/code&gt; der Fall ist), wäre dieser üblicherweise über &lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt; verfügbar. Diese umständliche Pfadangabe ist im &lt;code&gt;scripts&lt;/code&gt;-Teil der &lt;code&gt;package.json&lt;/code&gt; nicht notwendig. Es reicht ein einfaches &lt;code&gt;webpack&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Skripte ausführen mit &lt;code&gt;npx&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Npx ist neu mit Npm 5.0 hinzugekommen. Es vereinfacht das Ausführen von Kommandozeilenbefehlen, die durch Npm installiert wurden ungemein. Seitdem lässt sich das oben genannte Beispiel &lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt; durch &lt;code&gt;npx webpack&lt;/code&gt; abkürzen. (In der &lt;code&gt;package.json&lt;/code&gt; ist es aber weiterhin nicht notwendig)&lt;/p&gt;
&lt;p&gt;Wird versucht, durch Npx einen Befehl auszuführen, der nicht existiert, wird automatisch das jeweilige Skript temporär via Npm installiert und anschließend ausgeführt. Dies ist vor allem dann hilfreich, wenn man einen Befehl nur ausprobieren möchte oder ihn nur sehr selten benötigt — zum Beispiel &lt;code&gt;yo&lt;/code&gt; von &lt;a href=&quot;http://yeoman.io/&quot;&gt;&lt;em&gt;Yeoman&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pakete global installieren mit &lt;code&gt;npm install --global&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Die Möglichkeit, Pakete global auf dem System zu installieren, gerät mit der Zeit immer mehr in den Hintergrund. Durch Npx ist es einerseits nicht mehr notwendig, andererseits wird es an einigen Stellen empfohlen, Skripte im Projektkontext statt global zu installieren.&lt;/p&gt;
&lt;p&gt;Einen interessanten Einsatzzweck hat die globale Installation von Paketen aber dennoch: Das Entwickeln von systemunabhängigen Kommandozeilenskripten, die die Arbeit mit der Kommandozeile vereinfachen sollen. Ein global installiertes Paket ergibt nur dann Sinn, wenn es einen Befehl für die Kommandozeile bereitstellt, der in vielen Ordnern einsetzbar ist. Ein Beispiel wäre &lt;a href=&quot;https://github.com/DeMille/bookmark&quot;&gt;bookmark&lt;/a&gt;, ein kleines Kommandozeilen-Werkzeug, mit dem man Ordner als Lesezeichen anlegen kann, um schneller dorthin navigieren zu können.&lt;/p&gt;
&lt;h2&gt;Node mit ChakraCore&lt;/h2&gt;
&lt;p&gt;Aktuell arbeitet Microsoft auch an einer Version von Node.js mit ChakraCore statt V8. ChakraCore ist die JavaScript-Engine des Browsers Edge. Man kann diese Version in Form einer Vorschau-Version ausprobieren. Der Quellcode ist auf &lt;a href=&quot;https://github.com/nodejs/node-chakracore&quot;&gt;GitHub&lt;/a&gt; zu finden.&lt;/p&gt;
&lt;h2&gt;Node.js und WASM&lt;/h2&gt;
&lt;p&gt;Node.js wird in Zukunft mit &lt;em&gt;WASM&lt;/em&gt; (WebAssembly) vermutlich noch etwas mehr an Bedeutung und Vielfältigkeit gewinnen. WASM, kurz erklärt, ist ein compile target für allerlei Programmiersprachen. WASM verwendet dabei die Laufzeitumgebung, die auch von JavaScript verwendet wird, allerdings wird beim Kompiliervorgang quasi an JavaScript &amp;quot;vorbeikompiliert&amp;quot;. Dadurch ist für WASM kompilierter Programmcode sehr performant. Da Node.js eine Plattform ist, die auf einer Unzahl von Plattformen lauffähig ist, gilt das auch für WASM-Programme.&lt;/p&gt;
&lt;p&gt;Unterm Strich erlaubt dies das Entwickeln von performanter Software in einer beliebigen Programmiersprache, die überall dort lauffähig ist, wo man eine WASM-kompatible JavaScript-Engine vorfindet. Das heißt konkret: Jede Plattform, auf der Node.js lauffähig ist und auch jeder aktuelle Web-Browser. Die aktuell primär unterstützten Sprachen sind C/C++ und Rust von Mozilla. Weitere Sprachen werden bald folgen. Darunter bekannte Sprachen, aber auch werden daraufhin neue Sprachen entstehen, die primär auf WASM abgestimmt sind, zum Beispiel &lt;a href=&quot;https://github.com/AssemblyScript/assemblyscript&quot;&gt;AssemblyScript&lt;/a&gt; oder &lt;a href=&quot;https://github.com/utatti/kou&quot;&gt;Kou&lt;/a&gt;.&lt;/p&gt;
]]></content></entry></feed>